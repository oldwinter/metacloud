// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.217.1/containers/ubuntu
{
	"name": "Ubuntu",
	"build": {
		"dockerfile": "Dockerfile",
		"args": { "VARIANT": "focal" }
	},
	// --init 参数会在start container时,进行类似垃圾进程清理的动作; --privileged 参数会让container获得更高的系统级权限
	"runArgs": ["--init","--privileged"],

	"workspaceFolder": "/workspaces/metacloud",

	// 暂定此处admin container关闭vscode窗口不自动stop, 因为里面还有各种运行时的资源, restart耗时较长,10秒左右. 
	"shutdownAction": "none",

	// Set *default* container specific settings.json values on container create.
	"settings": {
		
	},

	// 个人开发必用插件
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"ms-azuretools.vscode-docker",
		"ms-kubernetes-tools.vscode-kubernetes-tools",
		"redhat.vscode-yaml",
	],

	// TODO 官方镜像自带 zsh和oh-my-zsh， 这里改成默认用zsh，并加入zsh的kubectl插件，完善自动补全功能
	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "ls -al && bash .devcontainer/install.sh",

	// Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode",

	// feature在dockerfile构建完后，继续构建feature。这个模式其实就是微软封装的dockerfile里面执行的library-scripts脚本，如果安装失败，可以考虑换成脚本，并改动dockerfile
	// https://github.com/microsoft/vscode-dev-containers/blob/main/script-library/docs/kubectl-helm.md
	"features": {
		"docker-in-docker": {
			"version": "latest",
			"moby": true
		},
		"kubectl-helm-minikube": {
			"version": "latest",
			"helm": "latest",
			"minikube": "latest"
		},
		"node": "lts"

	}
}
